// Package gcal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package gcal

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Account defines model for Account.
type Account struct {
	Description *string `json:"description,omitempty"`
	Email       string  `json:"email"`
	Uuid        string  `json:"uuid"`
}

// Accounts defines model for Accounts.
type Accounts = []Account

// GoogleAccount defines model for GoogleAccount.
type GoogleAccount struct {
	Appid       string  `json:"appid"`
	Description *string `json:"description,omitempty"`
	Email       string  `json:"email"`
	Oauthtoken  string  `json:"oauthtoken"`
}

// Status defines model for Status.
type Status struct {
	Accounts  *int   `json:"accounts,omitempty"`
	Calendars *int   `json:"calendars,omitempty"`
	Status    string `json:"status"`
}

// PostApiAccountsJSONRequestBody defines body for PostApiAccounts for application/json ContentType.
type PostApiAccountsJSONRequestBody = GoogleAccount

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/accounts)
	GetApiAccounts(c *gin.Context)

	// (POST /api/accounts)
	PostApiAccounts(c *gin.Context)

	// (GET /api/status)
	GetApiStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetApiAccounts(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"system_member"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAccounts(c)
}

// PostApiAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostApiAccounts(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"system_member"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAccounts(c)
}

// GetApiStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApiStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/accounts", wrapper.GetApiAccounts)
	router.POST(options.BaseURL+"/api/accounts", wrapper.PostApiAccounts)
	router.GET(options.BaseURL+"/api/status", wrapper.GetApiStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUTW/bPAz+KwLf9+jFWbZdfMuKYSj20QLBTkVRqDIdq7UlVaLSeYX/+yDJiZPG21ps",
	"zSWySdHk88EHELo1WqEiB8UDOFFjy+NxKYT2isLRWG3QksQYKNEJKw1JrcIjdQahAEdWqjX0GWDLZTMZ",
	"8V6WE4E+A4t3XlosobgY7g/Zl9k2W1/foKBQZugsNiMJ23j432IFBfyXjwPlwzT5dpR+V4xby7vw/FHr",
	"dYO/nJUbM9ly9hcoaO6pJn2L6ulYpD4O7k4hsyJO3k2MsYcYfuetaRCKxa6AVIRrtKGC4A2qktvD1HdT",
	"qW73sV0enH2C7A8jDdeO2w8lUXgrqVsF4lLrZ0tP9SKcqkbfp2k81drKHzyAf6JLPHr5zTZQQE1kXJHn",
	"ouY0k6qy/FWr1S12M6HbPEKZb68hZOCENumjrnOE7VWL7TVaKOBLOgT9BOyfUV4IdO4qMdaP+ovRBfTh",
	"lVSVjkqQFDFMkmQnAxPswwYVsa+aZCVFHI8tz0/ZCu0GLWSwQeuiCmE+m89eR4kZVNxIKODNbD6bQwaG",
	"Ux1Hy7mR+b4e1hh1H+QSi5+WoQekpZE7owUGndHKJXgW83n4E1oRJtdwY5qhufzGJUsk9z3Rmy5hEVy1",
	"NRV8lo6YrpjQqpJrb7FkfMwe1QLFxaiTi0fkXfaXfQZGOzraXXBikRMyrtiA+VCeVdqyrROY2kMeskdA",
	"nWt3hNSdR0fvddn9M5AOt1R/aCmyHvuXZ2gkaARw5aO+K980HRMRzZJxpvCe7e3ct89s5nB3tegcX+P0",
	"rny8Qo46PFUb3siSDaw8Tzd9luwybrrfmGXYvS9IxPCFKR5iJHiFatzfDn38/QwAAP//et41x+YHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
